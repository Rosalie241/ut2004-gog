#!/usr/bin/env bash
set -e

data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/ut2004-gog"
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/ut2004-gog"
opt_dir="/opt/ut2004-gog"

game_dir="$data_dir/ut2004"
wine_dir="$data_dir/wine"

patch_file_name="ut2004-linux.tar.gz"
patch_url="https://raw.githubusercontent.com/tim241/ut2004-gog/master/$patch_file_name"
patch_checksum="148b9cf081bb793c7f4668f25ae181fd9509d7fc540915b52d22a75d33b5a046"

game_exe_checksum="1f8712b4da90a22d822e4f2c2a4d841df2692be96d0f85f9064c6c77480c3b85"
game_bin_checksum="81b6c1cf3931bf030d918461a134eff49921a0809cf215a6066639d0e6f0bf67"

sdlcl_prebuilt_checksum="c593ac43a9e8913d308833fd79499bb0348bfc05f4fe469ecdacd2feaa06bf37"
sdlcl_file_name="libSDL-1.2.so.0"


export WINEPREFIX="$wine_dir/"

function log()
{
    echo "[LOG] $*"
}

function download_patch()
{
    log "[GAME] downloading game patch"
    curl -s "$patch_url" -o "$patch_file"
}

function install_patch()
{
    if [ -f "$opt_dir/$patch_file_name" ]
    then
        patch_file="$opt_dir/$patch_file_name"
    else
        patch_file="$cache_dir/$patch_file_name"
        if [ ! -f "$patch_file" ]
        then
            download_patch
        else
            if ! verify_checksum "$patch_checksum" "$patch_file"
            then
                download_patch
            fi
        fi
    fi
    
    if ! verify_checksum "$patch_checksum" "$patch_file"
    then
        exit 1
    fi

    log "[GAME] installing patch"
    tar xf "$patch_file" -C "$game_dir/"
}

function download_sdlcl()
{
    log "[SDLCL] downloading prebuilt"
    curl -s -L https://github.com/tim241/sdlcl/releases/download/1/sdlcl.tar.gz -o "$cache_dir/sdlcl.tar.gz"
}

function install_prebuilt_sdlcl()
{
    mkdir -p "$cache_dir/sdlcl_bin"

    sdlcl_prebuilt_file="$cache_dir/sdlcl.tar.gz"

    if [ -f "$sdlcl_prebuilt_file" ]
    then
        if ! verify_checksum "$sdlcl_prebuilt_checksum" "$sdlcl_prebuilt_file"
        then
            download_sdlcl
        fi
    else
        download_sdlcl
    fi
    
    log "[SDLCL] extracting prebuilt"

    tar xf "$cache_dir/sdlcl.tar.gz" -C "$cache_dir/sdlcl_bin"

    if [ "$(uname -m | grep '64')" ]
    then
        cp "$cache_dir/sdlcl_bin/64/$sdlcl_file_name" \
            "$cache_dir/bin/$sdlcl_file_name"
    else
        cp "$cache_dir/sdlcl_bin/32/$sdlcl_file_name" \
            "$cache_dir/bin/$sdlcl_file_name"
    fi
}

function install_sdlcl()
{
    if [ ! -f "/usr/lib/libSDL2.so" ]
    then
        return 1
    fi

    log "[SDLCL] SDL2 library found"
    
    if [ ! -f "$cache_dir/bin/$sdlcl_file_name" ]
    then
        log "[SDLCL] no prebuilt library found, trying to build SDLCL"
        
        log "[SDLCL] cloning repository"
        git clone https://github.com/tim241/sdlcl "$cache_dir/sdlcl" &> "$cache_dir/sdlcl_git.log"

        bdir="$(pwd)"
        cd "$cache_dir/sdlcl"
        
        log "[SDLCL] trying to build"
        if ! make -j$(nproc) &> "$cache_dir/sdlcl_make.log"
        then
            log "[SDLCL] building failed, installing prebuilt"
            install_prebuilt_sdlcl
        else
            cp "$sdlcl_file_name" "$cache_dir/bin/$sdlcl_file_name"
        fi 
        cd "$bdir"
    fi

    log "[SDLCL] installing SDLCL"
    cp "$cache_dir/bin/$sdlcl_file_name" "$game_dir/System/$sdlcl_file_name"

    log "[SDLCL] cleaning"
    rm -rf "$cache_dir/sdlcl_bin" \
        "$cache_dir/sdlcl"
}

function install_symlinks()
{
    log "[GAME] symlinking libraries"
    if ! install_sdlcl
    then
        ln -s /usr/lib/libSDL-1.2.so.0 \
           "$game_dir/System/"
    fi
    ln -s /usr/lib/libopenal.so \
        "$game_dir/System/openal.so"
}

function get_cdkey()
{
    # don't crash when cdkey retrieval fails
    set +e
    
    log "[GAME] retrieving cdkey"
    cdkey="$(wine REG QUERY 'HKEY_LOCAL_MACHINE\SOFTWARE\Unreal Technology\Installed Apps\UT2004' \
        /v 'CDkey' \
        | awk '{ print $3 }' \
        | sed -n 3p \
        | sed 's/\r//' \
        2> "$cache_dir/cdkey.log")"
    wineserver -w

    # crash on error again!
    set -e

    if [ "$cdkey" ] && \
        [ "${#cdkey}" = "23" ]
    then
        log "[GAME] cdkey found: $cdkey"
    elif [ "$cdkey" ]
    then
        log "[GAME] invalid cdkey found: $cdkey"
    else
        log "[GAME] failed to retrieve cdkey"
    fi
    
    while [ ! "$cdkey" ] || \
        [ "${#cdkey}" != "23" ]
    do
        echo "Please enter the cdkey manually and press enter"
        printf "enter cdkey: "
        read cdkey
    done

}

function install_clean()
{
    log "[WINE] removing wine prefix"
    rm -rf "$wine_dir"
}

function install_cdkey()
{
    log "[GAME] installing cdkey"
    echo "$cdkey" > "$game_dir/System/CDkey"
}

function prepare()
{
    exe="$1"
    bin="${exe//.exe/-1.bin}"

    program="$(basename "$0")"
    if [ ! -f "$exe" ]
    then
        printf "%s\n\n%s\n%s\n\n%s\n%s\n\n" \
            "error: no valid installer specified!" \
            "Usage:" \
            "   $program [UT2004 INSTALLER FROM GOG]" \
            "Example:" \
            "   $program setup.exe"
        exit 1
    fi

    if ! verify_checksum "$game_exe_checksum" "$exe"
    then
        exit 1
    fi

    if [ -f "$bin" ] && \
         [ "${bin: -3}" = "bin" ]
    then
        if ! verify_checksum "$game_bin_checksum" "$bin"
        then
            exit 1
        fi
    else
        log "cannot find bin file"
    fi
    
    mkdir -p "$data_dir" \
        "$data_dir/wine" \
        "$cache_dir" \
        "$cache_dir/bin"

    log "[WINE] creating wine prefix"
    wineboot --init &> "$cache_dir/wineboot.log"
    wineserver -w

    log "[WINE] winetricks nocrashdialog"
    winetricks nocrashdialog &> "$cache_dir/winetricks.log"
    wineserver -w

    log "[WINE] launching '$exe'"
    wine "$exe" &> "$cache_dir/wine.log"
    wineserver -w

    log "[GAME] moving game files"
    mv "$wine_dir/drive_c/GOG Games/Unreal Tournament 2004/" \
        "$game_dir"

    install_patch
    install_symlinks

    get_cdkey
    install_cdkey

    # This can fail, so make sure we won't crash
    set +e
    wineserver -k
    set -e

    install_clean
}

function verify_checksum()
{
    checksum="$1"
    shift

    log "[CHECKSUM] verifying '$@'"
    file_checksum="$(sha256sum "$@" | awk '{ print $1 }')"

    if [ "$checksum" != "$file_checksum" ]
    then
        log "[CHECKSUM] mismatch! expected '$checksum' got '$file_checksum'"
        return 1
    else
        log "[CHECKSUM] matched!"
        return 0
    fi
}

if [ "$1" = "-c" ] || \
    [ "$1" = "--clean" ]
then
    rm -rf "$data_dir" \
        "$cache_dir"
    shift
fi

file_list=(
        'System/ut2004-bin-linux-amd64'
        'System/ut2004-bin'
        'System/CDkey'
        'System/libSDL-1.2.so.0'
        'System/openal.so'
        'System/UT2004.exe'
        )

missing=no
for file in "${file_list[@]}"
do
    if [ ! -f "$game_dir/$file" ]
    then
        missing=yes
        break
    fi
done

if [ "$missing" = "yes" ]
then
	if ! which winetricks > /dev/null 2>&1; then echo "winetricks not installed"; fi
    prepare "$@"
fi

cd "$game_dir/System"

log "[GAME] detecting architecture"
if [ "$(uname -m | grep '64')" ]
then
    log "[GAME] launching 64 bit client"
    ./ut2004-bin-linux-amd64
else
    log "[GAME] launching 32 bit client"
    ./ut2004-bin
fi

