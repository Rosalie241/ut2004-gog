#!/usr/bin/env bash
set -e

data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/ut2004-gog"
cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/ut2004-gog"
opt_dir="/opt/ut2004-gog"

game_dir="$data_dir/ut2004"
wine_dir="$data_dir/wine"

patch_file_name="ut2004-linux.tar.gz"
patch_url="https://raw.githubusercontent.com/tim241/ut2004-gog/master/$patch_file_name"
patch_checksum="148b9cf081bb793c7f4668f25ae181fd9509d7fc540915b52d22a75d33b5a046"

game_exe_checksum="327feb7c7d96a65be57ef34e5cd5e10bd57eb4082b2bd6028f1415168a0c8083"
game_bin_checksum="677f388edebe3af7f12e5a16cdf5c5c20f9164c9d5da0eced1650d1b655adb81"

export WINEPREFIX="$data_dir/wine"

function log()
{
    echo "[LOG] $*"
}

function install_patch()
{
    if [ -f "$opt_dir/$patch_file_name" ]
    then
        patch_file="$opt_dir/$patch_file_name"
    else
        patch_file="$cache_dir/$patch_file_name"
        log "[GAME] downloading game patch"
        curl -s "$patch_url" -o "$patch_file"
    fi
    
    verify_checksum "$patch_checksum" "$patch_file"

    log "[GAME] installing patch"
    tar xf "$patch_file" -C "$game_dir/"
}

function install_symlinks()
{
    log "[GAME] symlinking libraries"
    ln -s /usr/lib/libSDL-1.2.so.0 \
       "$game_dir/System/"
    ln -s /usr/lib/libopenal.so \
        "$game_dir/System/openal.so"
}

function get_cdkey()
{
    # don't crash when cdkey retrieval fails
    set +e
    
    log "[GAME] retrieving cdkey"
    cdkey="$(wine REG QUERY 'HKEY_LOCAL_MACHINE\SOFTWARE\Unreal Technology\Installed Apps\UT2004' \
        /v 'CDkey' \
        | awk '{ print $3 }' \
        | sed -n 3p \
        | sed 's/\r//' \
        2> "$cache_dir/cdkey.log")"
    wineserver -w

    # crash on error again!
    set -e

    if [ "$cdkey" ] && \
        [ "${#cdkey}" = "23" ]
    then
        log "[GAME] cdkey found: $cdkey"
    elif [ "$cdkey" ]
    then
        log "[GAME] invalid cdkey found: $cdkey"
    else
        log "[GAME] failed to retrieve cdkey"
    fi
    
    while [ ! "$cdkey" ] || \
        [ "${#cdkey}" != "23" ]
    do
        echo "Please enter the cdkey manually and press enter"
        printf "enter cdkey: "
        read cdkey
    done

}

function install_clean()
{
    log "[WINE] removing wine prefix"
    rm -rf "$wine_dir"
}

function install_cdkey()
{
    log "[GAME] installing cdkey"
    echo "$cdkey" > "$game_dir/System/CDkey"
}

function prepare()
{
    exe="$1"
    bin="${exe//.exe/-1.bin}"

    program="$(basename "$0")"
    if [ ! -f "$exe" ]
    then
        printf "%s\n\n%s\n%s\n\n%s\n%s\n\n" \
            "error: no valid installer specified!" \
            "Usage:" \
            "   $program [UT2004 INSTALLER FROM GOG]" \
            "Example:" \
            "   $program setup.exe"
        exit 1
    fi

    verify_checksum "$game_exe_checksum" "$exe"
    if [ -f "$bin" ] && \
         [ "${bin: -3}" = "bin" ]
    then
        verify_checksum "$game_bin_checksum" "$bin"
    else
        log "cannot find bin file"
    fi
    
    mkdir -p "$data_dir" \
        "$data_dir/wine" \
        "$cache_dir" 

    log "[WINE] creating wine prefix"
    wineboot --init &> "$cache_dir/wineboot.log"
    wineserver -w

    log "[WINE] winetricks nocrashdialog"
    winetricks nocrashdialog &> "$cache_dir/winetricks.log"
    wineserver -w

    log "[WINE] launching '$exe'"
    wine "$exe" &> "$cache_dir/wine.log"
    wineserver -w

    log "[GAME] moving game files"
    mv "$wine_dir/drive_c/GOG Games/Unreal Tournament 2004/" \
        "$game_dir"

    install_patch
    install_symlinks

    get_cdkey
    install_cdkey

    wineserver -k
    install_clean

}

function verify_checksum()
{
    checksum="$1"
    shift

    log "[CHECKSUM] verifying '$@'"
    file_checksum="$(sha256sum "$@" | awk '{ print $1 }')"

    if [ "$checksum" != "$file_checksum" ]
    then
        log "[CHECKSUM] mismatch! expected '$checksum' got '$file_checksum'"
        exit 1
    else
        log "[CHECKSUM] matched!"
    fi
}

if [ "$1" = "-c" ] || \
    [ "$1" = "--clean" ]
then
    rm -rf "$data_dir" \
        "$cache_dir"
    shift
fi

file_list=(
        'System/ut2004-bin-linux-amd64'
        'System/ut2004-bin'
        'System/CDkey'
        'System/libSDL-1.2.so.0'
        'System/openal.so'
        'System/UT2004.exe'
        )

missing=no
for file in "${file_list[@]}"
do
    if [ ! -f "$game_dir/$file" ]
    then
        missing=yes
    fi
done

if [ "$missing" = "yes" ]
then
    prepare "$@"
fi

cd "$game_dir/System"

log "[GAME] detecting architecture"
if [ "$(uname -m | grep '64')" ]
then
    log "[GAME] launching 64 bit client"
    ./ut2004-bin-linux-amd64
else
    log "[GAME] launching 32 bit client"
    ./ut2004-bin
fi

